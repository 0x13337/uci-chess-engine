#ifndef __BTABLES_H__
#define __BTABLES_H__

/*
 * This file stores all of the pregenerated tables necessary for bitboard move
 * generation and evaluation. These values must be in the code so that the
 * program is a single standalone unit, so keeping them in a separate file keeps
 * code clean.
 */

//------------------------------Piece tables--------------------------------
const int midgamePieceValues[6][64] = {
{ // Pawns
  0,  0,  0,  0,  0,  0,  0,  0,
 15, 25, 35, 40, 40, 35, 25, 15,
  5, 10, 15, 25, 25, 15, 10,  5,
  0,  5, 15, 20, 20, 10,  5,  0,
 -5, -5, 10, 15, 15,  0, -5, -5,
 -5, -5,  5, 10, 10,-10, -5, -5,
-10,  0,  0,  0,  0,  0,  0,-10,
  0,  0,  0,  0,  0,  0,  0,  0
},
{ // Knights
-30,-15,-10,-10,-10,-10,-15,-30,
-20,-10,  0,  0,  0,  0,-10,-20,
-10,  0,  5,  5,  5,  5,  0,-10,
-10,  5,  5,  5,  5,  5,  5,-10,
-10,  0,  5,  5,  5,  5,  0,-10,
-10,  5,  5,  5,  5,  5,  5,-10,
-20,-10,  0,  5,  5,  0,-10,-20,
-30,-15,-10,-10,-10,-10,-15,-30
},
{ // Bishops
-20,-10,-10,-10,-10,-10,-10,-20,
-10,  0,  0,  0,  0,  0,  0,-10,
-10,  0,  5,  0,  0,  5,  0,-10,
-10,  5,  5,  0,  0,  5,  5,-10,
-10,  5,  5,  0,  0,  5,  5,-10,
-10,  5,  5,  0,  0,  5,  5,-10,
-10,  5,  0,  0,  0,  0,  5,-10,
-20,-10,-10,-10,-10,-10,-10,-20
},
{ // Rooks
-10,  0,  0,  0,  0,  0,  0,-10,
  0, 10, 10, 10, 10, 10, 10,  0,
-10,  0,  0,  0,  0,  0,  0,-10,
-10,  0,  0,  0,  0,  0,  0,-10,
-10,  0,  0,  0,  0,  0,  0,-10,
-10,  0,  0,  0,  0,  0,  0,-10,
-10,  0,  0,  0,  0,  0,  0,-10,
-10, -5,  0,  0,  0,  0, -5,-10
},
{ // Queens
-10, -5, -5, -5, -5, -5, -5,-10
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
-10, -5, -5, -5, -5, -5, -5,-10
},
{ // Kings
 -75, -75, -75, -75, -75, -75, -75, -75,
 -60, -60, -60, -60, -60, -60, -60, -60,
 -45, -45, -45, -45, -45, -45, -45, -45,
 -30, -30, -30, -30, -30, -30, -30, -30,
 -15, -15, -15, -15, -15, -15, -15, -15,
   0,   5,  -5, -10, -10,  -5,   5,   0,
  10,  15,   0,  -5,  -5,   0,  15,  10,
  20,  35,  15,   0,   5,  10,  40,  20 
}
};

const int endgamePieceValues[6][64] = {
{ // Pawns
  0,  0,  0,  0,  0,  0,  0,  0,
 90,100,110,110,110,110,100, 90,
 50, 60, 70, 70, 70, 70, 60, 50,
 15, 25, 35, 35, 35, 35, 25, 15,
 -5,  5, 10, 10, 10, 10,  5, -5,
-15, -5,  0,  0,  0,  0, -5,-15,
-25,-15,-10,-10,-10,-10,-15,-25,
  0,  0,  0,  0,  0,  0,  0,  0
},
{ // Knights
-30,-15,-10,-10,-10,-10,-15,-30,
-20,-10,  0,  0,  0,  0,-10,-20,
-10,  0,  5,  5,  5,  5,  0,-10,
-10,  5,  5,  5,  5,  5,  5,-10,
-10,  0,  5,  5,  5,  5,  0,-10,
-10,  5,  5,  5,  5,  5,  5,-10,
-20,-10,  0,  5,  5,  0,-10,-20,
-30,-15,-10,-10,-10,-10,-15,-30
},
{ // Bishops
-20,-10,-10,-10,-10,-10,-10,-20,
-10,  0,  0,  0,  0,  0,  0,-10,
-10,  0,  5,  0,  0,  5,  0,-10,
-10,  5,  5,  0,  0,  5,  5,-10,
-10,  5,  5,  0,  0,  5,  5,-10,
-10,  5,  5,  0,  0,  5,  5,-10,
-10,  5,  0,  0,  0,  0,  5,-10,
-20,-10,-10,-10,-10,-10,-10,-20
},
{ // Rooks
-10,  0,  0,  0,  0,  0,  0,-10,
  0, 10, 10, 10, 10, 10, 10,  0,
-10,  0,  0,  0,  0,  0,  0,-10,
-10,  0,  0,  0,  0,  0,  0,-10,
-10,  0,  0,  0,  0,  0,  0,-10,
-10,  0,  0,  0,  0,  0,  0,-10,
-10,  0,  0,  0,  0,  0,  0,-10,
-10, -5,  0,  0,  0,  0, -5,-10
},
{ // Queens
-10, -5, -5, -5, -5, -5, -5,-10
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
 -5,  0,  0,  0,  0,  0,  0, -5,
-10, -5, -5, -5, -5, -5, -5,-10
},
{ // Kings
 -20, -15, -10, -10, -10, -10, -15, -20,
 -15, -10,  -5,   0,   0,  -5, -10, -15,
 -10,  -5,   5,  10,  10,   5,  -5, -10,
 -10,   0,  10,  20,  20,  10,   0, -10,
 -10,   0,  10,  20,  20,  10,   0, -10,
 -10,  -5,   5,  10,  10,   5,  -5, -10,
 -15, -10,  -5,   0,   0,  -5, -10, -15,
 -20, -15, -10, -10, -10, -10, -15, -20 
}
};

// Mobility tables
const int knightMobility[9] = {
-15,-10, -5,  0,  4,  7,  9, 12, 15};
const int bishopMobility[14] = {
-20,-15,-10, -5,  0,  4,  7,  9, 11, 13, 15, 17, 19, 20};
const int rookMobility[15] = {
-20,-15,-10, -5, -2,  0,  2,  4,  6,  8, 10, 11, 12, 13, 14};
const int queenMobility[28] = {
-20,-13, -8, -6, -5, -4, -3, -2, -1,  0,  1,  1,  2,  2,
  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8,  9,  9};

// The initial board setup in mailbox form.
const int initMailbox[64] = {
    3, 1, 2, 4, 5, 2, 1, 3,
    0, 0, 0, 0, 0, 0, 0, 0,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1,
    6, 6, 6, 6, 6, 6, 6, 6,
    9, 7, 8, 10, 11, 8, 7, 9
};

// Lookup table for knight moves
const uint64_t KNIGHTMOVES[64] = {
0x0000000000020400, 0x0000000000050800, 0x00000000000a1100, 0x0000000000142200,
0x0000000000284400, 0x0000000000508800, 0x0000000000a01000, 0x0000000000402000,
0x0000000002040004, 0x0000000005080008, 0x000000000a110011, 0x0000000014220022,
0x0000000028440044, 0x0000000050880088, 0x00000000a0100010, 0x0000000040200020,
0x0000000204000402, 0x0000000508000805, 0x0000000a1100110a, 0x0000001422002214,
0x0000002844004428, 0x0000005088008850, 0x000000a0100010a0, 0x0000004020002040,
0x0000020400040200, 0x0000050800080500, 0x00000a1100110a00, 0x0000142200221400,
0x0000284400442800, 0x0000508800885000, 0x0000a0100010a000, 0x0000402000204000,
0x0002040004020000, 0x0005080008050000, 0x000a1100110a0000, 0x0014220022140000,
0x0028440044280000, 0x0050880088500000, 0x00a0100010a00000, 0x0040200020400000,
0x0204000402000000, 0x0508000805000000, 0x0a1100110a000000, 0x1422002214000000,
0x2844004428000000, 0x5088008850000000, 0xa0100010a0000000, 0x4020002040000000,
0x0400040200000000, 0x0800080500000000, 0x1100110a00000000, 0x2200221400000000,
0x4400442800000000, 0x8800885000000000, 0x100010a000000000, 0x2000204000000000,
0x0004020000000000, 0x0008050000000000, 0x00110a0000000000, 0x0022140000000000,
0x0044280000000000, 0x0088500000000000, 0x0010a00000000000, 0x0020400000000000
};

// Lookup table for king moves
const uint64_t KINGMOVES[64] = {
0x0000000000000302, 0x0000000000000705, 0x0000000000000e0a, 0x0000000000001c14,
0x0000000000003828, 0x0000000000007050, 0x000000000000e0a0, 0x000000000000c040,
0x0000000000030203, 0x0000000000070507, 0x00000000000e0a0e, 0x00000000001c141c,
0x0000000000382838, 0x0000000000705070, 0x0000000000e0a0e0, 0x0000000000c040c0,
0x0000000003020300, 0x0000000007050700, 0x000000000e0a0e00, 0x000000001c141c00,
0x0000000038283800, 0x0000000070507000, 0x00000000e0a0e000, 0x00000000c040c000,
0x0000000302030000, 0x0000000705070000, 0x0000000e0a0e0000, 0x0000001c141c0000,
0x0000003828380000, 0x0000007050700000, 0x000000e0a0e00000, 0x000000c040c00000,
0x0000030203000000, 0x0000070507000000, 0x00000e0a0e000000, 0x00001c141c000000,
0x0000382838000000, 0x0000705070000000, 0x0000e0a0e0000000, 0x0000c040c0000000,
0x0003020300000000, 0x0007050700000000, 0x000e0a0e00000000, 0x001c141c00000000,
0x0038283800000000, 0x0070507000000000, 0x00e0a0e000000000, 0x00c040c000000000,
0x0302030000000000, 0x0705070000000000, 0x0e0a0e0000000000, 0x1c141c0000000000,
0x3828380000000000, 0x7050700000000000, 0xe0a0e00000000000, 0xc040c00000000000,
0x0203000000000000, 0x0507000000000000, 0x0a0e000000000000, 0x141c000000000000,
0x2838000000000000, 0x5070000000000000, 0xa0e0000000000000, 0x40c0000000000000
};

// Masks the relevant rook or bishop occupancy bits for magic bitboards
const uint64_t ROOK_MASK[64] = {
0x000101010101017eULL, 0x000202020202027cULL, 0x000404040404047aULL, 0x0008080808080876ULL, 
0x001010101010106eULL, 0x002020202020205eULL, 0x004040404040403eULL, 0x008080808080807eULL, 
0x0001010101017e00ULL, 0x0002020202027c00ULL, 0x0004040404047a00ULL, 0x0008080808087600ULL, 
0x0010101010106e00ULL, 0x0020202020205e00ULL, 0x0040404040403e00ULL, 0x0080808080807e00ULL, 
0x00010101017e0100ULL, 0x00020202027c0200ULL, 0x00040404047a0400ULL, 0x0008080808760800ULL, 
0x00101010106e1000ULL, 0x00202020205e2000ULL, 0x00404040403e4000ULL, 0x00808080807e8000ULL, 
0x000101017e010100ULL, 0x000202027c020200ULL, 0x000404047a040400ULL, 0x0008080876080800ULL, 
0x001010106e101000ULL, 0x002020205e202000ULL, 0x004040403e404000ULL, 0x008080807e808000ULL, 
0x0001017e01010100ULL, 0x0002027c02020200ULL, 0x0004047a04040400ULL, 0x0008087608080800ULL, 
0x0010106e10101000ULL, 0x0020205e20202000ULL, 0x0040403e40404000ULL, 0x0080807e80808000ULL, 
0x00017e0101010100ULL, 0x00027c0202020200ULL, 0x00047a0404040400ULL, 0x0008760808080800ULL, 
0x00106e1010101000ULL, 0x00205e2020202000ULL, 0x00403e4040404000ULL, 0x00807e8080808000ULL, 
0x007e010101010100ULL, 0x007c020202020200ULL, 0x007a040404040400ULL, 0x0076080808080800ULL, 
0x006e101010101000ULL, 0x005e202020202000ULL, 0x003e404040404000ULL, 0x007e808080808000ULL, 
0x7e01010101010100ULL, 0x7c02020202020200ULL, 0x7a04040404040400ULL, 0x7608080808080800ULL, 
0x6e10101010101000ULL, 0x5e20202020202000ULL, 0x3e40404040404000ULL, 0x7e80808080808000ULL, 
};

const uint64_t BISHOP_MASK[64] = {
0x0040201008040200ULL, 0x0000402010080400ULL, 0x0000004020100a00ULL, 0x0000000040221400ULL, 
0x0000000002442800ULL, 0x0000000204085000ULL, 0x0000020408102000ULL, 0x0002040810204000ULL, 
0x0020100804020000ULL, 0x0040201008040000ULL, 0x00004020100a0000ULL, 0x0000004022140000ULL, 
0x0000000244280000ULL, 0x0000020408500000ULL, 0x0002040810200000ULL, 0x0004081020400000ULL, 
0x0010080402000200ULL, 0x0020100804000400ULL, 0x004020100a000a00ULL, 0x0000402214001400ULL, 
0x0000024428002800ULL, 0x0002040850005000ULL, 0x0004081020002000ULL, 0x0008102040004000ULL, 
0x0008040200020400ULL, 0x0010080400040800ULL, 0x0020100a000a1000ULL, 0x0040221400142200ULL, 
0x0002442800284400ULL, 0x0004085000500800ULL, 0x0008102000201000ULL, 0x0010204000402000ULL, 
0x0004020002040800ULL, 0x0008040004081000ULL, 0x00100a000a102000ULL, 0x0022140014224000ULL, 
0x0044280028440200ULL, 0x0008500050080400ULL, 0x0010200020100800ULL, 0x0020400040201000ULL, 
0x0002000204081000ULL, 0x0004000408102000ULL, 0x000a000a10204000ULL, 0x0014001422400000ULL, 
0x0028002844020000ULL, 0x0050005008040200ULL, 0x0020002010080400ULL, 0x0040004020100800ULL, 
0x0000020408102000ULL, 0x0000040810204000ULL, 0x00000a1020400000ULL, 0x0000142240000000ULL, 
0x0000284402000000ULL, 0x0000500804020000ULL, 0x0000201008040200ULL, 0x0000402010080400ULL, 
0x0002040810204000ULL, 0x0004081020400000ULL, 0x000a102040000000ULL, 0x0014224000000000ULL, 
0x0028440200000000ULL, 0x0050080402000000ULL, 0x0020100804020000ULL, 0x0040201008040200ULL, 
};

// The number of relevant bits for rook and bishop occupancy sets for each square
const int NUM_ROOK_BITS[64] = {
    12, 11, 11, 11, 11, 11, 11, 12,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12
};

const int NUM_BISHOP_BITS[64] = {
    6, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 6
};

#endif